extends ../layout

block content
  .spot-detail(style="max-width: 800px; margin: 0 auto;")
    // Spot information section
    .spot-info(style="margin-bottom: 30px;")
      h2= spot.title

      .spot-metadata(style="display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;")
        span.category(style=`display: inline-block; padding: 4px 8px; border-radius: 4px; background-color: ${
          spot.category === 'good-place' ? '#48bb78' : 
          spot.category === 'alert' ? '#f56565' : 
          spot.category === 'event' ? '#4299e1' : 
          '#718096'
        }; color: white;`)= spot.category.charAt(0).toUpperCase() + spot.category.slice(1).replace('-', ' ')

        if spot.updatedAt
          span.date(style="color: #718096; font-size: 0.9em;") Mis à jour le #{new Date(spot.updatedAt).toLocaleDateString()}

      .description
        p= spot.description

      .coordinates(style="margin: 15px 0; color: #718096;")
        p 
          strong Coordonnées: 
          | Longitude: #{spot.coords.coordinates[0].toFixed(6)}, Latitude: #{spot.coords.coordinates[1].toFixed(6)}

    // Map section
    .map-section
      h3 Localisation sur la carte

      #spot-map(style="height: 400px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);")

    // Actions section
    .actions(style="display: flex; gap: 15px; margin-top: 25px;")
      a.back-button(href="/spots" style="padding: 8px 15px; background-color: #718096; color: white; text-decoration: none; border-radius: 4px;") Retour à la liste

      if spot.category === 'alert'
        a.alerts-button(href=`/alerts?spotId=${spot._id}`, style="padding: 8px 15px; background-color: #f56565; color: white; text-decoration: none; border-radius: 4px;") Voir les alertes

      a.view-on-map-button(href=`/map#spot=${spot._id}`, style="padding: 8px 15px; background-color: #4299e1; color: white; text-decoration: none; border-radius: 4px;") Voir sur la carte principale

  script.
    // Initialize the spot map
    document.addEventListener('DOMContentLoaded', function() {
      // Get coordinates from the spot data (GeoJSON format [lng, lat])
      const lng = #{spot.coords.coordinates[0]};
      const lat = #{spot.coords.coordinates[1]};
      const spotTitle = "#{spot.title}";
      const spotCategory = "#{spot.category}";

      // Initialize map centered on the spot location
      const map = L.map('spot-map').setView([lat, lng], 15);

      // Add OpenStreetMap tiles
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      // Custom icon based on category
      const iconUrl = spotCategory === 'good-place' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png' :
        spotCategory === 'alert' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png' :
        spotCategory === 'event' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png' :
        'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png';

      const icon = L.icon({
        iconUrl: iconUrl,
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        shadowSize: [41, 41]
      });

      L.marker([lat, lng], { icon: icon })
        .addTo(map)
        .bindPopup(`<strong>${spotTitle}</strong><br>Catégorie: ${spotCategory}`);

      L.circle([lat, lng], {
        color: 'rgba(52, 152, 219, 0.3)',
        fillColor: 'rgba(52, 152, 219, 0.1)',
        fillOpacity: 0.5,
        radius: 150
      }).addTo(map);

      fetch(`/api/spots/nearby?lat=${lat}&lng=${lng}&distance=0.5`)
        .then(res => res.json())
        .then(nearbySpots => {
          const otherSpots = nearbySpots.filter(spot => spot._id !== "#{spot._id}");

          if (otherSpots.length > 0) {
            otherSpots.forEach(nearbySpot => {
              const [nearbyLng, nearbyLat] = nearbySpot.coords.coordinates;

              const nearbyIconUrl = nearbySpot.category === 'good-place' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png' :
                nearbySpot.category === 'alert' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png' :
                nearbySpot.category === 'event' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png' :
                'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png';

              const nearbyIcon = L.icon({
                iconUrl: nearbyIconUrl,
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                shadowSize: [41, 41],
                opacity: 0.7
              });

              L.marker([nearbyLat, nearbyLng], { icon: nearbyIcon, opacity: 0.7 })
                .addTo(map)
                .bindPopup(`
                  <strong>${nearbySpot.title}</strong><br>
                  <span style="font-size: 0.9em;">${nearbySpot.category}</span><br>
                  <a href="/spots/${nearbySpot._id}">Voir détails</a>
                `);
            });
          }
        })
        .catch(err => {
          console.error('Error loading nearby spots:', err);
        });

      // Add street name if available
      fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1`)
        .then(res => res.json())
        .then(data => {
          if (data && data.display_name) {
            // Add an info box with the address
            const addressInfo = L.control({position: 'bottomleft'});

            addressInfo.onAdd = function(map) {
              const div = L.DomUtil.create('div', 'address-info');
              div.style.background = 'white';
              div.style.padding = '8px 12px';
              div.style.borderRadius = '4px';
              div.style.boxShadow = '0 1px 5px rgba(0,0,0,0.2)';
              div.style.fontSize = '12px';
              div.style.maxWidth = '300px';
              div.innerHTML = `<strong>Adresse:</strong> ${data.display_name}`;
              return div;
            };

            addressInfo.addTo(map);
          }
        })
        .catch(err => {
          console.error('Error fetching address:', err);
          // Silently fail, as this is just an enhancement
        });
    });