extends layout

block content
  h2 Carte des spots
  
  .map-controls(style="margin-bottom: 15px;")
    label(for="category-filter") Filtrer par catégorie:
    select#category-filter(style="margin: 0 10px;")
      option(value="all") Tous
      option(value="good-place") Bonnes adresses
      option(value="alert") Alertes
      option(value="event") Événements
      option(value="other") Autres
    
    button#user-location(style="margin-left: 10px;") Utiliser ma position
    
  #map(style="height: 500px;")
  
  .spot-actions(style="margin-top: 15px; text-align: right;")
    a.button(href="/spots/create", style="padding: 8px 15px; background-color: #0077cc; color: white; text-decoration: none; border-radius: 4px;") Ajouter un spot
  
  script.
    // Initialize map centered on Paris
    const map = L.map('map').setView([48.85, 2.35], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
    
    // Store all markers for filtering
    let allMarkers = [];
    
    // Custom icons based on category
    const icons = {
      'good-place': L.icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        shadowSize: [41, 41]
      }),
      'alert': L.icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        shadowSize: [41, 41]
      }),
      'event': L.icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        shadowSize: [41, 41]
      }),
      'other': L.icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        shadowSize: [41, 41]
      })
    };
    
    // Load spots from API
    fetch('/api/spots')
      .then(res => res.json())
      .then(spots => {
        spots.forEach(spot => {
          // Create marker with custom icon based on category
          const icon = icons[spot.category] || icons.other;
          
          const marker = L.marker([spot.coords.lat, spot.coords.lng], {icon: icon})
            .addTo(map)
            .bindPopup(`
              <h3>${spot.title}</h3>
              <p>${spot.description}</p>
              <p><small>Catégorie: ${spot.category}</small></p>
              <a href="/spots/${spot._id}">Voir détails</a>
            `);
          
          // Store marker with its category for filtering
          allMarkers.push({
            marker: marker,
            category: spot.category
          });
        });
      })
      .catch(err => {
        console.error('Error loading spots:', err);
      });
    
    // Filter markers by category
    document.getElementById('category-filter').addEventListener('change', function() {
      const selectedCategory = this.value;
      
      allMarkers.forEach(item => {
        if (selectedCategory === 'all' || item.category === selectedCategory) {
          map.addLayer(item.marker);
        } else {
          map.removeLayer(item.marker);
        }
      });
    });
    
    // Use user's current location
    document.getElementById('user-location').addEventListener('click', function() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
          const userLat = position.coords.latitude;
          const userLng = position.coords.longitude;
          
          // Center map on user location
          map.setView([userLat, userLng], 15);
          
          // Add a special marker for user location
          L.marker([userLat, userLng], {
            icon: L.icon({
              iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-violet.png',
              iconSize: [25, 41],
              iconAnchor: [12, 41],
              popupAnchor: [1, -34],
              shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
              shadowSize: [41, 41]
            })
          }).addTo(map)
            .bindPopup("Votre position")
            .openPopup();
          
          // Load nearby spots
          fetch(`/api/spots/nearby?lat=${userLat}&lng=${userLng}&distance=5`)
            .then(res => res.json())
            .then(nearbySpots => {
              console.log('Nearby spots:', nearbySpots.length);
            })
            .catch(err => {
              console.error('Error loading nearby spots:', err);
            });
        }, error => {
          console.error('Error getting location:', error);
          alert('Impossible de récupérer votre position.');
        });
      } else {
        alert('La géolocalisation n\'est pas supportée par votre navigateur.');
      }
    });